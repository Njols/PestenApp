@using PestApp.ViewModels
@using Enums;
@{
    ViewData["Title"] = "CreateRuleSet";
}

<h2>CreateRuleSet</h2>
@model CreateRuleSetViewModel

@using (Html.BeginForm("AddRule", "Home", FormMethod.Post))
{
    <div id="ruleSelection">
        <p>When a(n) @Html.DropDownListFor(m => m.Face, Model.CardFaceSelectList)</p>
        <input name="CheckBox" id="CheckBox" type="checkbox" value="true" onclick="thefunction()" style="display:inline" /><p style="display:inline">of</p>
        <div id="cardSuitContainer" style="display:none"> @Html.DropDownListFor(m => m.Suit, Model.CardSuitSelectList)</div>
        <p>is played,</p>
        <select name="Type" onchange="CheckAmountBox()" id="typeSelect" style="display:inline">
            @foreach (DropDownListItem item in Model.DropDownListItems)
            {
                @if (item.HasAmount)
                {
                    <option value="@item.PostValue" id="amounted">@item.Name</option>
                }
                else
                {
                    <option value="@item.PostValue" id="amountless">@item.Name</option>
                }
            }
        </select>
        <div id="ruleDisplay">
            <p id="firstText" style="display:inline"></p>
            <input id="amountBox" type="number" name="RuleAmount" min="1" style="display:inline" />
            <p id="lastText" style="display:inline"></p>
        </div>
        <input id="addButton" type="submit" value="Add Rule" name="command" />
        <script>
        var displayStringArray = @Html.Raw(Json.Serialize(Model.RuleTypeDisplayStrings));

        var firstParagraph = document.getElementById("firstText");
        var lastParagraph = document.getElementById("lastText");
        var amountBox = document.getElementById("amountBox");
        var typeSelect = document.getElementById("typeSelect")

        function CheckAmountBox() {
            var selectedOption = typeSelect.options[typeSelect.selectedIndex];
            if (selectedOption.id.toString() == "amountless") {
                amountBox.style.display = "none";
                amountBox.textContent = null;
                lastParagraph.innerHTML = displayStringArray[typeSelect.selectedIndex];
            }
            else {
                amountBox.style.display = "inline-block";
                var str = displayStringArray[typeSelect.selectedIndex]
                firstParagraph.innerHTML = str.split("|")[0];
                lastParagraph.innerHTML = str.split("|")[1];
            }
        }
        window.onload(CheckAmountBox());
        </script>
    </div>
}


@using (Html.BeginForm("AddAdditionalRule", "Home", FormMethod.Post))
{
    <div id="additionalRuleSelection">
        @Html.DropDownListFor(m => m.AdditionalRule, Model.AdditionalRuleSelectList)
        <input id="addExtraRule" type="submit" value="Add Extra Rule" name="command" />
    </div>
}

@using (Html.BeginForm("RemoveAdditionalRule", "Home", FormMethod.Post))
{
    <div id="addRuleList">
        @{
            var index = 0;
        }
        @foreach (additionalRule additionalRule in Model.AdditionalRules)
        {
            <p>
                @additionalRule
                <button name="command" value="@index">X</button>
            </p>
            index++;
        }
    </div>
}

@using (Html.BeginForm("RemoveRule", "Home", FormMethod.Post))
{
    <div id="ruleList">
        @{
            var Index = 0;
        }

        <div id="id">
            @foreach (Rule rule in Model.Rules)
            {
                <p>
                    @rule.Card.GetCard() @rule.RuleTypeString
                    <button name="command" value="@Index">X</button>
                </p>
                Index++;
            }
        </div>
    </div>
}

@using (Html.BeginForm("SaveRuleSet", "Home", FormMethod.Post))
{
    @Html.TextBoxFor(m => m.Name)
    <input type="submit" value="Save Rule Set" />
}